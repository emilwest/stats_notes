---
author: "Emil Westin"
format: gfm
execute: 
  eval: false
editor: 
  markdown: 
    wrap: sentence
---


## System handling in R

### Remove all files and subdirectories under path/\* (without deleting path/)

```{r}
unlink("path/*", recursive = TRUE)
unlink("path/*") # deletes files only, no directories
```

### Remove all files and subdirectories for multiple paths

```{r}
# set pattern = ".*out.*" to target specific directories named out
out_dirs <- list.files(str_glue("C:/path1/path2"), full.names = T, recursive = T, pattern = ".*out.*", include.dirs = T)
out_dirs <- str_c(out_dirs, "/*")
# out_dirs contains: "C:/path1/path2/ax/out/*" "C:/path1/path2/dk/out/*" "C:/path1/path2/EA/out/*" "C:/path1/path2/EU/out/*" ...
unlink(out_dirs, recursive = T) # removes files and dirs under "C:/path1/path2/{ax,dk,EA,EU,...}/out/*"
```

### Extract filenames or directory names from a path

```{r}
basename("C:/px/hej.txt")
# hej.txt
dirname("C:/px/hej.txt")
# "C:/px"
```




## Powershell

If you're a windows user, this is good to know if you need to do any form of automation on system files.

### grep -r in powershell

``` powershell
dir C:\Users\emiwes\Documents\experiments -Recurse | Select-String -pattern "my search"
```

### Rename all files in folder

This example removes all files containing \_flags in filename:

``` powershell
Dir | Rename-Item –NewName { $_.name –replace “_flags“,”” }
```

### Run/execute program/scripts from R using system()

```{r}
system("powershell ls -rec H:\\Documents\\")
```

### Search and replace multiple files in folder

Add ls -rec for subfolders and for ex.
-Include \*.txt for including txt files only

```{r}
system("powershell (ls H:\\Documents\\multiple_tests\\*) |
       Foreach-Object{ $f=$_; (gc $f.PSPath) |
       Foreach-Object {$_ -replace '\\\"hej', 'hej' } |
       Set-Content $f.PSPath
       }
       ")
```

### Convert all files to utf-8

Run this in the folder you want to make changes in

``` powershell
foreach($i in ls -recurse -filter "*.R") {
     $temp = Get-Content $i.fullname
     Out-File -filepath $i.fullname -inputobject $temp -encoding utf8 -force
 }
```

# Git

Git is a distributed version control system that is really useful to know.

``` git
Note: [Using git version 2.30.0.windows.2]

# open global .gitconfig in ~/.gitconfig. To find where ~ is on windows, type echo $HOME
git config --global --edit
# create and switch to branch:
git checkout -b main/emil_westin
# push to your current branch:
git push origin HEAD
# push to main directly:
git push origin HEAD:main 
# show changes:
git diff 
# add everything to staged:
git add -A
# unstage all files:
git reset 
# unstage specific file:
git restore --staged file.txt
# commit:
git commit -m "message"
# to modify previous commit, for ex include a new file, type:
git commit --amend 
# if you already have a folder that you want to track with version conrol and associate with a remote repository:
git remote add origin https://linktoyourremotereporitory
# clone a repository (get a local copy incl all version history):
git clone https://linktoremotereporitory
```

Nice extra things to add in the \~/.gitconfig to add color in the terminal:

``` git
[color]
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
```

<!-- # Creating a virtual environment -->

<!-- To do -->

<!-- # Bash / linux useful commands -->

<!-- To do -->
